// <auto-generated />
using System;
using InventoryManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryManagement.Api.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20210326173441_SeedingData")]
    partial class SeedingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryManagement.Core.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c997673f-e403-4f91-bb7a-6dd15d76de6a"),
                            Brand = "Kroger",
                            Description = "One Gallon of Milk",
                            Name = "Milk",
                            ProductCategoryId = new Guid("7e42a3b7-f02f-442d-97ef-2b13bb423414")
                        },
                        new
                        {
                            Id = new Guid("fbb01de7-b1bb-4ff2-850f-637a77f8a8f3"),
                            Brand = "Kroger",
                            Description = "One Carton of a Dozen Eggs",
                            Name = "Eggs",
                            ProductCategoryId = new Guid("5a077aa8-c217-4209-a70c-dd92c2d10b09")
                        },
                        new
                        {
                            Id = new Guid("638d4da9-a377-43fe-bb22-d50d2dd320e4"),
                            Brand = "Dole",
                            Description = "One Honeycrisp Apple",
                            Name = "Honecrisp Apple",
                            ProductCategoryId = new Guid("209bc539-de7d-4a75-9590-eabb17e2cf8d")
                        },
                        new
                        {
                            Id = new Guid("6b5a6deb-23a3-4377-8d35-70d8d0bf5e74"),
                            Brand = "Dole",
                            Description = "One Yellow Banana",
                            Name = "Banana",
                            ProductCategoryId = new Guid("209bc539-de7d-4a75-9590-eabb17e2cf8d")
                        },
                        new
                        {
                            Id = new Guid("cb259b96-2b84-4e3f-ad4d-06e1e7274d8e"),
                            Brand = "Dole",
                            Description = "One Green Plump Cucumber",
                            Name = "Cucumber",
                            ProductCategoryId = new Guid("ba24f865-0af3-4ce1-b123-0f1dcd1e3020")
                        },
                        new
                        {
                            Id = new Guid("d190a2df-89e4-4374-bdf0-4715a81b2917"),
                            Brand = "King Arthur",
                            Description = "One Bag of Flour",
                            Name = "Flour",
                            ProductCategoryId = new Guid("52411182-ff92-46ec-9233-a76ffb190339")
                        });
                });

            modelBuilder.Entity("InventoryManagement.Core.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e42a3b7-f02f-442d-97ef-2b13bb423414"),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("209bc539-de7d-4a75-9590-eabb17e2cf8d"),
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = new Guid("ba24f865-0af3-4ce1-b123-0f1dcd1e3020"),
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = new Guid("5a077aa8-c217-4209-a70c-dd92c2d10b09"),
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("52411182-ff92-46ec-9233-a76ffb190339"),
                            Name = "Dry Goods"
                        });
                });

            modelBuilder.Entity("InventoryManagement.Core.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("InventoryManagement.Core.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UOM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("InventoryManagement.Core.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("953dd08f-c28f-4874-b349-4be7ce73eaa0"),
                            Name = "Costco"
                        },
                        new
                        {
                            Id = new Guid("db2efaee-39ae-4994-90eb-3d9190ea2beb"),
                            Name = "Sam's Club"
                        },
                        new
                        {
                            Id = new Guid("fedb1c36-4180-4dc1-921f-53bc39a5e9f0"),
                            Name = "General Mills"
                        },
                        new
                        {
                            Id = new Guid("e6c1f658-d288-4c43-a720-8886e73df726"),
                            Name = "Kroger"
                        });
                });

            modelBuilder.Entity("InventoryManagement.Core.Product", b =>
                {
                    b.HasOne("InventoryManagement.Core.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Core.Purchase", b =>
                {
                    b.HasOne("InventoryManagement.Core.Vendor", null)
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Core.PurchaseItem", b =>
                {
                    b.HasOne("InventoryManagement.Core.Product", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagement.Core.PurchaseItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Core.Purchase", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagement.Core.PurchaseItem", "PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
